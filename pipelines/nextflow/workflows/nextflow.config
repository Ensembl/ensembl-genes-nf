/* 
See the NOTICE file distributed with this work for additional information
regarding copyright ownership.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Set minimum required Nextflow version, stopping execution if current version does not match
//nextflowVersion = '!>=23.01'

// Global default params, used in configs
params {
//input options
  help = false

  outDir = null
  genomeFasta = null
  cacheDir = "${params.outDir}/cache"
}

scratch = ''
workDir = ''

includeConfig '../conf/repeatmodeler.config'

singularity {
  enabled = true
  autoMounts = true
  pullTimeout = '1 hour'
}

profiles {

  standard {
    executor {
      name = 'slurm'
      queueSize = 2000
      submitRateLimit = "10/1sec"
      queueGlobalStatus = true
      exitReadTimeout = "30 min"
    }

    process {
      clusterOptions = '-t 7-00:00:00 -e errlog.txt'
    }
  }


}

process {
  errorStrategy = { task.exitStatus in [104, 137, 140, 143] ? 'retry' : 'terminate' }
  maxRetries = 3
  cache = 'lenient'

  withLabel: 'default' {
    cpus = 1
    memory = { 3.GB * task.attempt }
    time = { 1.h * task.attempt }
    afterScript = { "sleep 60" }
    storeDir = { "${params.outDir}/cache/${task.process.tokenize(':')[-1].toLowerCase()}/${task.tag}" }
  }

  withLabel: 'repeatmodeler' {
    cpus = 1
    memory = { 16.GB * task.attempt }
    time = { 4.h * task.attempt }
  }

}
