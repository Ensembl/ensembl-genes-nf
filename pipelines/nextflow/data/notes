import argparse
import sys
import os
from Bio import SeqIO

def parse_gff3(gff3_file):
    coding_genes = []
    total_transcripts = 0
    total_exons = 0
    total_coding_exons = 0
    total_introns = 0
    coding_transcripts = 0
    coding_transcripts_per_gene = []
    coding_exons_per_transcript = []

    try:
        with open(gff3_file) as f:
            for line in f:
                if not line.startswith("#"):
                    fields = line.strip().split("\t")
                    if fields[2] == "gene":
                        attributes = dict(item.split("=") for item in fields[8].split(";"))
                        if "biotype" in attributes and attributes["biotype"] == "protein_coding":
                            coding_genes.append((fields[0], int(fields[3]), int(fields[4])))
                    elif fields[2] == "CDS":
                        total_coding_exons += 1
                    elif fields[2] == "exon":
                        total_exons += 1
                    elif fields[2] == "transcript":
                        total_transcripts += 1
                        attributes = dict(item.split("=") for item in fields[8].split(";"))
                        if "biotype" in attributes and attributes["biotype"] == "protein_coding":
                            coding_transcripts += 1
                            coding_exons_per_transcript.append(0)
                    elif fields[2] == "intron":
                        total_introns += 1

    except FileNotFoundError:
        print("GFF3 file not found:", gff3_file)
        sys.exit(1)
    except Exception as e:
        print("Error parsing GFF3 file:", e)
        sys.exit(1)

    if not coding_genes:
        print("No protein-coding genes found in the GFF3 file")
        sys.exit(1)

    coding_genes.sort(key=lambda x: (x[0], x[1]))

    total_genes = len(coding_genes)
    total_span = sum(gene[2] - gene[1] for gene in coding_genes)
    average_genomic_span = total_span / total_genes

    coding_genes_lengths = [gene[2] - gene[1] for gene in coding_genes]
    average_sequence_length = sum(coding_genes_lengths) / total_genes
    shortest_gene = min(coding_genes_lengths)
    longest_gene = max(coding_genes_lengths)

    coding_transcripts_per_gene = coding_transcripts / total_genes
    average_cds_length = total_span / total_coding_exons

    if coding_transcripts > 0:
        coding_transcripts_per_gene = coding_transcripts / total_genes
        average_coding_exon_length = total_span / total_coding_exons
        average_exons_per_transcript = total_exons / coding_transcripts
        average_coding_exons_per_transcript = total_coding_exons / coding_transcripts

    if total_introns > 0:
        average_intron_length = total_span / total_introns

    print("Scientific name:", scientific_name)
    print("Coding genes:", total_genes)
    print("Average genomic span:", average_genomic_span)
    print("Average sequence length:", average_sequence_length)
    print("Average CDS length:", average_cds_length)
    print("Shortest gene:", shortest_gene)
    print("Longest gene:", longest_gene)
    print("Total transcripts:", total_transcripts)
    print("Coding transcripts:", coding_transcripts)
    print("Transcripts per gene:", coding_transcripts_per_gene)
    print("Coding transcripts per gene:", coding_transcripts_per_gene)
    print("Total exons:", total_exons)
    print("Total coding exons:", total_coding_exons)
    print("Average exon length:", average_coding_exon_length)
    print("Average coding exon length:", average_coding_exon_length)
    print("Average exons per transcript:", average_exons_per_transcript)
    print("Average coding exons per coding transcript:", average_coding_exons_per_transcript)
    print("Total introns:", total_introns)
    print("Average intron length:", average_intron_length)

def main():
    parser = argparse.ArgumentParser(description="Parse GFF3 file and calculate statistics")
    parser.add_argument("gff3_file", help="Input GFF3 file")
    args = parser.parse_args()
    parse_gff3(args.gff3_file)

if __name__ == "__main__":
    main()
